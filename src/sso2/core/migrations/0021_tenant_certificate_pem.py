# Generated by Django 4.2 on 2023-05-25 17:36
import socket

from cryptography.hazmat.primitives.serialization import Encoding
from django.apps.registry import Apps
from django.conf import settings
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor

from sso2.core.keyutils import create_client_certificate, get_private_key_from_path
from sso2.core.models.tenant_model import get_tenant_issuer


def generate_certificates(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    tenant_model_class = apps.get_model("core", "Tenant")
    for tenant in tenant_model_class.objects.all():
        tenant_issuer_url = get_tenant_issuer(tenant_id=str(tenant.id))
        domain_name = settings.APP_DOMAIN_NAME
        tenant.certificate_pem = (
            create_client_certificate(
                issuer_name=tenant_issuer_url,
                private_key=get_private_key_from_path(
                    tenant.private_key_path,
                ).private_key,
                tls_client_auth_san_dns=domain_name,
                tls_client_auth_san_uri=tenant_issuer_url,
                tls_client_auth_san_ip=socket.gethostbyname(domain_name),
                tls_client_auth_san_email=f"admin@{domain_name}",
                tls_client_auth_subject_dn=f"CN={domain_name}",
            )
            .public_bytes(Encoding.PEM)
            .decode("utf-8")
        )

        tenant.save(update_fields=["certificate_pem"])


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0020_remove_tenant_uid"),
    ]

    operations = [
        migrations.AddField(
            model_name="tenant",
            name="certificate_pem",
            field=models.TextField(default=""),
            preserve_default=False,
        ),
        migrations.RunPython(
            generate_certificates,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
